userInteractionEnabled

clipsToBounds
layer.cornerRadius
layer.masksToBounds
layer.borderWidth
layer.borderColorWithUIColor   //导入CALayer+TSYXibBorderColor文件

block
How Do I Declare A Block in Objective-C?   http://fuckingblocksyntax.com
作为参数时
- (void)switchBlock:(void(^)(int loginType))suc;
- (void)switchBlock:(void (^)(int))suc{}


https://www.jianshu.com/p/d4973ae64cb3
//三种使用方式都可以
@property (nonatomic, copy, nonnull) NSString *name;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * __nonnull name;

//补充（不适用于assign属性，因为它是专门用来修饰指针的）
@property (nonatomic, assign) NSUInteger age;

//补充（用下面宏包裹起来的属性全部都具nonnull特征,当然，如果其中某个属性你不希望有这个特征，也可以自己定义，比如加个nullable）
//在NS_ASSUME_NONNULL_BEGIN
//NS_ASSUME_NONNULL_END
之间,定义的所有对象属性和方法默认都是nonnull

//也可以在定义方法的时候使用
//返回值和参数都不能为空
- (nonnull NSString *)test:(nonnull NSString *)name;
- (NSString * _Nonnull)test1:(NSString * _Nonnull)name; (同上)

//nullable 只能修饰对象，不能修饰基本数据类型 三种使用方式
// 方式一:
@property (nonatomic, copy, nullable) NSString *name;
// 方式二:
@property (nonatomic, copy) NSString *_Nullable name;
// 方式三:
@property (nonatomic, copy) NSString *__nullable name;



//补充（用下面宏包裹起来的属性全部都具nonnull特征,当然，如果其中某个属性你不希望有这个特征，也可以自己定义，比如加个nullable）
//在NS_ASSUME_NONNULL_BEGIN
//NS_ASSUME_NONNULL_END
之间,定义的所有对象属性和方法默认都是nonnull

//也可以在定义方法的时候使用
//返回值和参数都不能为空
- (nonnull NSString *)test:(nonnull NSString *)name;
- (NSString * _Nonnull)test1:(NSString * _Nonnull)name; (同上)

//nullable 只能修饰对象，不能修饰基本数据类型 三种使用方式
// 方式一:
@property (nonatomic, copy, nullable) NSString *name;
// 方式二:
@property (nonatomic, copy) NSString *_Nullable name;
// 方式三:
@property (nonatomic, copy) NSString *__nullable name;

//补充（用下面宏包裹起来的属性全部都具nonnull特征,当然，如果其中某个属性你不希望有这个特征，也可以自己定义，比如加个nullable）
//在NS_ASSUME_NONNULL_BEGIN
//NS_ASSUME_NONNULL_END
之间,定义的所有对象属性和方法默认都是nonnull

//也可以在定义方法的时候使用
//返回值和参数都不能为空
- (nonnull NSString *)test:(nonnull NSString *)name;
- (NSString * _Nonnull)test1:(NSString * _Nonnull)name; (同上)

//nullable 只能修饰对象，不能修饰基本数据类型 三种使用方式
// 方式一:
@property (nonatomic, copy, nullable) NSString *name;
// 方式二:
@property (nonatomic, copy) NSString *_Nullable name;
// 方式三:
@property (nonatomic, copy) NSString *__nullable name;

//补充（用下面宏包裹起来的属性全部都具nonnull特征,当然，如果其中某个属性你不希望有这个特征，也可以自己定义，比如加个nullable）
//在NS_ASSUME_NONNULL_BEGIN
//NS_ASSUME_NONNULL_END
之间,定义的所有对象属性和方法默认都是nonnull

//也可以在定义方法的时候使用
//返回值和参数都不能为空
- (nonnull NSString *)test:(nonnull NSString *)name;
- (NSString * _Nonnull)test1:(NSString * _Nonnull)name; (同上)

//nullable 只能修饰对象，不能修饰基本数据类型 三种使用方式
// 方式一:
@property (nonatomic, copy, nullable) NSString *name;
// 方式二:
@property (nonatomic, copy) NSString *_Nullable name;
// 方式三:
@property (nonatomic, copy) NSString *__nullable name;

//补充（用下面宏包裹起来的属性全部都具nonnull特征,当然，如果其中某个属性你不希望有这个特征，也可以自己定义，比如加个nullable）
//在NS_ASSUME_NONNULL_BEGIN
//NS_ASSUME_NONNULL_END
之间,定义的所有对象属性和方法默认都是nonnull

//也可以在定义方法的时候使用
//返回值和参数都不能为空
- (nonnull NSString *)test:(nonnull NSString *)name;
- (NSString * _Nonnull)test1:(NSString * _Nonnull)name; (同上)

//nullable 只能修饰对象，不能修饰基本数据类型 三种使用方式
// 方式一:
@property (nonatomic, copy, nullable) NSString *name;
// 方式二:
@property (nonatomic, copy) NSString *_Nullable name;
// 方式三:
@property (nonatomic, copy) NSString *__nullable name;

//补充（用下面宏包裹起来的属性全部都具nonnull特征,当然，如果其中某个属性你不希望有这个特征，也可以自己定义，比如加个nullable）
//在NS_ASSUME_NONNULL_BEGIN
//NS_ASSUME_NONNULL_END
之间,定义的所有对象属性和方法默认都是nonnull

//也可以在定义方法的时候使用
//返回值和参数都不能为空
- (nonnull NSString *)test:(nonnull NSString *)name;
- (NSString * _Nonnull)test1:(NSString * _Nonnull)name; (同上)

//nullable 只能修饰对象，不能修饰基本数据类型 三种使用方式
// 方式一:
@property (nonatomic, copy, nullable) NSString *name;
// 方式二:
@property (nonatomic, copy) NSString *_Nullable name;
// 方式三:
@property (nonatomic, copy) NSString *__nullable name;

//补充（用下面宏包裹起来的属性全部都具nonnull特征,当然，如果其中某个属性你不希望有这个特征，也可以自己定义，比如加个nullable）
//在NS_ASSUME_NONNULL_BEGIN
//NS_ASSUME_NONNULL_END
之间,定义的所有对象属性和方法默认都是nonnull

//也可以在定义方法的时候使用
//返回值和参数都不能为空
- (nonnull NSString *)test:(nonnull NSString *)name;
- (NSString * _Nonnull)test1:(NSString * _Nonnull)name; (同上)

//nullable 只能修饰对象，不能修饰基本数据类型 三种使用方式
// 方式一:
@property (nonatomic, copy, nullable) NSString *name;
// 方式二:
@property (nonatomic, copy) NSString *_Nullable name;
// 方式三:
@property (nonatomic, copy) NSString *__nullable name;

//补充（用下面宏包裹起来的属性全部都具nonnull特征,当然，如果其中某个属性你不希望有这个特征，也可以自己定义，比如加个nullable）
//在NS_ASSUME_NONNULL_BEGIN
//NS_ASSUME_NONNULL_END
之间,定义的所有对象属性和方法默认都是nonnull

//也可以在定义方法的时候使用
//返回值和参数都不能为空
- (nonnull NSString *)test:(nonnull NSString *)name;
- (NSString * _Nonnull)test1:(NSString * _Nonnull)name; (同上)

//nullable 只能修饰对象，不能修饰基本数据类型 三种使用方式
// 方式一:
@property (nonatomic, copy, nullable) NSString *name;
// 方式二:
@property (nonatomic, copy) NSString *_Nullable name;
// 方式三:
@property (nonatomic, copy) NSString *__nullable name;

//补充（用下面宏包裹起来的属性全部都具nonnull特征,当然，如果其中某个属性你不希望有这个特征，也可以自己定义，比如加个nullable）
//在NS_ASSUME_NONNULL_BEGIN
//NS_ASSUME_NONNULL_END
之间,定义的所有对象属性和方法默认都是nonnull

//也可以在定义方法的时候使用
//返回值和参数都不能为空
- (nonnull NSString *)test:(nonnull NSString *)name;
- (NSString * _Nonnull)test1:(NSString * _Nonnull)name; (同上)

//nullable 只能修饰对象，不能修饰基本数据类型 三种使用方式
// 方式一:
@property (nonatomic, copy, nullable) NSString *name;
// 方式二:
@property (nonatomic, copy) NSString *_Nullable name;
// 方式三:
@property (nonatomic, copy) NSString *__nullable name;




